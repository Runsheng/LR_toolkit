# filename: utils.py

"""
# some functions which can be used globally,
# such as read the reference to the memory, read the fastq file to dict
"""

import subprocess
import signal  # only used for the exe function
import time
from functools import wraps
import multiprocessing
import fnmatch
import os
import sys

# The sequence operation functions--------------------------------------------------------------------------------------
from Bio import SeqIO
import gzip

def fastq2dic(fastqfile):
    """
    Give a fastq file name, return a dict contains the name and seq
    Require Biopython SeqIO medule to parse the sequence into dict, a large readfile may take a lot of RAM
    """
    if ".gz" in fastqfile:
        handle=gzip.open(fastqfile, "rU")
    else:
        handle=open(fastqfile, "rU")
    record_dict=SeqIO.to_dict(SeqIO.parse(handle, "fastq"))
    handle.close()
    return record_dict


def fasta2dic(fastafile):
    """
    Give a fasta file name, return a dict contains the name and seq
    Require Biopython SeqIO medule to parse the sequence into dict, a large genome may take a lot of RAM
    """
    if ".gz" in fastafile:
        handle=gzip.open(fastafile, "rU")
    else:
        handle=open(fastafile, "rU")
    record_dict=SeqIO.to_dict(SeqIO.parse(handle,"fasta"))
    handle.close()
    return record_dict


def dic2dic(record_dict):
    """
    :param record_dict: a SeqIO dict generated by Biopython
    :return the dict contain {name:seq}
    """
    seq_dict={}
    for k,v in record_dict.iteritems():
        seq=str(v.seq)
        seq_dict[k]=seq
    return seq_dict


def chr_select(record_dict, chro, start,end):
    """
    Note the start and end is 0 based
    give the name of refdic, and the chr, start and end to be used
    return the name and sequence (both as str)
    for example, chrcut(record_dict, "I", 100,109) returns
     ("I:100_109","AAAAAAAAAA")
    """
    name=chro+ ":"+str(start)+"_"+str(end)
    seq=str(record_dict[chro][start:end].seq)
    return name,seq


def dic2fasta(record_dict,out="record_dict.fasta"):
    """
    Write a record_dict of fatsa file back to fasta file
    :param record_dict:
    :param out:
    :return:
    """
    with open(out,"w") as f:
        for record in record_dict.keys():
            name=record
            seq=record_dict[name]
            f.write(">")
            f.write(name)
            f.write("\n")
            f.write(seq)
            f.write("\n")


def max_get(listname):
    """
    :param listname, a list containing some sequence strings;
    :return: the longest sequence string in the list.
    """
    chose=None
    max_length=len(listname[0])
    for n in range(1,len(listname)):
        if len(listname[n])>max_length:
            max_length=len(listname[n])
    for element in listname:
        if len(element)==max_length:
            chose=element
    return chose


def reverse_complement(seq):
    """
        Given: A DNA string s of length at most 1000 bp.
        Return: The reverse complement sc of s.
        due to the complement_map,
        the symbol such as \n and something else is illegal
        the input need to be pure sequence
    """
    complement_map = dict(zip("acgtACGTNn-","tgcaTGCANn-"))
    complement=[]
    for s in seq:
        complement.append(complement_map[s])
        reverse=''.join(reversed(complement))
    return reverse


def get_fasta_len(fastafile):

    total_len=0
    if ".gz" in fastafile:
        handle=gzip.open(fastafile, "rU")
    else:
        handle=open(fastafile, "rU")

    for record in SeqIO.parse(handle, "fasta"):
            total_len+=len(record)

    return total_len
# ----------------------------------------------------------------------------------------------------------------------
# The system operation functions----------------------------------------------------------------------------------------


def parmap(f, X, nprocs=multiprocessing.cpu_count()):
    """
    a function to use mutip map inside a function
    modified from stackoverflow, 3288595
    :param f:
    :param X:
    :param nprocs: core, if not given, use all core
    :return:
    """
    q_in = multiprocessing.Queue(1)
    q_out = multiprocessing.Queue()

    proc = [multiprocessing.Process(target=fun, args=(f, q_in, q_out))
            for _ in range(nprocs)]
    for p in proc:
        p.daemon = True
        p.start()

    sent = [q_in.put((i, x)) for i, x in enumerate(X)]
    [q_in.put((None, None)) for _ in range(nprocs)]
    res = [q_out.get() for _ in range(len(sent))]

    [p.join() for p in proc]

    return [x for i, x in sorted(res)]


def fun(f, q_in, q_out):
    """
    for parmap
    :param f:
    :param q_in:
    :param q_out:
    :return:
    """
    while True:
        i, x = q_in.get()
        if i is None:
            break
        q_out.put((i, f(x)))


def myglob(seqdir, word):
    """
     to write a glob for python2 for res-glob
    """
    matches=[]
    for root, dirnames, filenames in os.walk(seqdir):
         for filename in fnmatch.filter(filenames, word):
            matches.append(os.path.join(root, filename))
    return matches


def myexe(cmd, timeout=0):
    """
    a simple wrap of the shell
    mainly used to run the bwa mem mapping and samtool orders
    """
    def setupAlarm():
        signal.signal(signal.SIGALRM, alarmHandler)
        signal.alarm(timeout)

    def alarmHandler(signum, frame):
        sys.exit(1)

    proc=subprocess.Popen(cmd, shell=True, preexec_fn=setupAlarm,
                 stdout=subprocess.PIPE, stderr=subprocess.PIPE,cwd=os.getcwd())
    out, err=proc.communicate()
    print err
    return out, err, proc.returncode


def timer(fn):
    """
    Used for debug
    :param fn: the function
    :print: the time the function used
    """
    @wraps(fn)
    def wrapper(*args, **kwargs):
        ts = time.time()
        result = fn(*args, **kwargs)
        te = time.time()
        print("function = {0}".format(fn.__name__))
        print("    time = %.6f sec" % (te-ts))
        return result
    return wrapper


def my_chdir(fn, work_dir):
    @wraps(fn)
    def wrapper(*args, **kwargs):
        os.chdir(work_dir)
        result=fn(*args, **kwargs)
        return result
    return wrapper


# ----------------------------------------------------------------------------------------------------------------------




### unit test code ###
if __name__== "__main__":
    print myexe("ls")[0]
